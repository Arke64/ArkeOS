Registers
---------
R0-R63: General purpose use
RI0-RI15: General purpose use for interrupts only
RZ: Zero flag
RS: Sign flag
RC: Carry flag
RO: 0x00.. register
RF: 0xFF.. register
RSIP: Address of the instruction executing when an interrupt fires
RIP: Address of the current instruction
RSP: Address of the current stack position
RIDT: Address of the interrupt descriptor table

IDT
---
0x00: Invalid instruction
0x01: Divide by zero
0x02: System call
0x03: Protection violation
0x04-0x0F: Reserved
0x10-0xFF: User defined

Format
------
6b Code: The instruction code
2b Size: The size of data to work with (00 = 1 byte, 01 = 2 byte, 10 = 4 byte, 11 = 8 byte)
2b Parameter 0: The type of the parameter (00 = value in register, 01 = immediate value with size specified by Size, 10 = value at literal address, 11 = value at address specified by register)
2b Parameter 1: See above
2b Parameter 2: See above
2b Parameter 3: See above
0b-32b: Parameters

Basic
-----
00 HLT: Stops the processor
01 NOP: No operation
02 INT A: Raise the interrupt specified by A
03 MOV A B: Move B into A
04 IN A B: Read from device ID specified in A into B
05 OUT A B: Write to device ID specified in A from B
06 PUSH A: Push A onto the stack
07 POP A: Pop a value from the stack into A
08 JZ A B: Sets the instruction pointer to B if A is zero.
09 JNZ A B: Sets the instruction pointer to B if A is non-zero.
10 JIZ A B: Increments the instruction pointer by B if A is zero.
11 JINZ A B: Increments the instruction pointer by B if A is non-zero.
12 JDZ A B: Decrements the instruction pointer by B if A is zero.
13 JDNZ A B: Decrements the instruction pointer by B if A is non-zero.

Math
----
20 ADD A B C: Add A to B and store in C
21 ADC A B C: Add A with carry to B and store in C
22 ADF A B C: Add the IEEE 754 value in A to B and store in C
23 SUB A B C: Subtract A from B and store in C
24 SBB A B C: Subtract A with borrow from B and store in C
25 SBF A B C: Subtract the IEEE 754 value in A from B and store in C
26 DIV A B C: Divide B by A and store in C
27 DVF A B C: Divide B by the IEEE 754 value in A and store in C
28 MUL A B C: Multiply B by A and store in C
29 MLF A B C: Multiply B by the IEEE 754 value in A and store in C
30 INC A: Add 1 to A
31 DEC A: Subtract 1 from A
32 NEG A: Reverse the sign of A
33 MOD A B C: Take the remainder of dividing B by A and store in C
34 MDF A B C: Take the remainder of dividing B by the IEEE 754 value in A and store in C

Logic
-----
40 RR A B C: Rotate B right by A and store in C
41 RL A B C: Rotate B left by A and store in C
42 RRC A B C: Rotate B right with carry by A and store in C
43 RLC A B C: Rotate B left with carry by A and store in C
44 XCHG A B: Swap A and B
45 NAND A B C: Store the NAND of A and B in C
46 AND A B C: Store the AND of A and B in C
47 NOR A B C: Store the NOR of A and B in C
48 OR A B C: Store the OR of A and B in C
49 NXOR A B C: Store the NXOR of A and B in C
50 XOR A B C: Store the XOR of A and B in C
51 NOT A B: Store the NOT of A in B
52 GT A B: Update flags to reflect if B is greater than A
53 GTE A B: Update flags to reflect if B is greater than or equal to A
54 LT A B: Update flags to reflect if B is less than A
55 LTE A B: Update flags to reflect if B is less than or equal to A
56 EQ A B: Update flags to reflect if B is equal to A
57 NEQ A B: Update flags to reflect if B is not equal to A